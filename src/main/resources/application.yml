application:
  name: @project.artifactId@
  version: @project.version@
decorator:
  datasource:
    flexy-pool:
      threshold.connection:
        acquire: 1
        lease: 0
spring:
  application:
    name: copilot-backend
  datasource:
    url: ${DS_URL:jdbc:postgresql://localhost:5432/pg_db}
    username: ${DS_USERNAME}
    password: ${DS_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DS_MAX_POOL_SIZE:15}
      minimum-idle: ${DS_MIN_IDLE:1}
      idle-timeout: ${DS_IDLE_TIMEOUT:270000}
      keepalive-time: ${DS_KEEPALIVE_TIME:45000}
      max-lifetime: ${DS_MAX_LIFETIME:300000}
      auto-commit: false
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        show_sql: true
    open-in-view: false
  h2:
    console:
      enabled: true
      path: /h2-console
  servlet:
    multipart:
      enabled: true
      max-file-size: 20MB
      max-request-size: 20MB
      file-size-threshold: 2KB
  ai:
    openai:
      embedding:
        options:
          model: ${OPENAI_EMBEDDING_MODEL:text-embedding-3-small}
      api-key: ${OPENAI_API_KEY}
py-backend:
  baseUrl: http://copilot:8000
jwt:
  secret-key: ${JWT_SECRET_KEY}
  expiration-time: ${JWT_EXPIRATION_TIME:36000000}
server:
  tomcat:
    max-swallow-size: -1
faq:
  search:
    min-result-before-semantic-search: ${FAQ_MIN_RESULT_BEFORE_SEMANTIC_SEARCH:5}
    trigram-matching:
      limit: ${FAQ_TRIGRAM_MATCHING_LIMIT:15}
      threshold: ${FAQ_SEARCH_THRESHOLD:0.4}
    semantic-matching:
      limit: ${FAQ_SEMANTIC_MATCHING_LIMIT:10}
      metric: ${FAQ_SEMANTIC_MATCHING_METRIC:cosine_similarity}
rag:
  reranking:
    cohere-api-key: ${COHERE_API_KEY:cohere_api_key}
logging:
  level:
    org:
      springframework:
        ai: DEBUG
        security: DEBUG
deepl:
  auth-key: ${DEEPL_API_KEY:deepl_auth_key}
  default-target-lang: 'fr'
zas:
  security:
    blue-token:
      public-key: ${GATEWAY_PUBLIC_KEY}
      header-name: blue
proxy:
  host: ${PROXY_HOST:proxy-bvcol.admin.ch}
  port: ${PROXY_PORT:8080}
  non-proxy-hosts: ${NON_PROXY_HOSTS:localhost,.admin.ch}
  enabled: true
ai:
  agent:
    ii-data-folder: ${II_DATA_FOLDER}